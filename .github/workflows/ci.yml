name: CI Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  test-e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Frontend Dependencies
        working-directory: ./frontend/react
        #run: npm ci
        run: npm install

      # - name: Add local bin to PATH
      #   run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      - name: Install Starknet Foundry (sncast)
        run: |
          curl -L https://raw.githubusercontent.com/foundry-rs/starknet-foundry/master/scripts/install.sh | sh
          #export PATH="$HOME/.foundry/bin:$PATH"
          echo "$HOME/.foundry/bin" >> $GITHUB_PATH
          echo "$HOME/.cairo/bin" >> $GITHUB_PATH
          source "$HOME/.bashrc"
          snfoundryup

      - name: Install Rust and Scarb
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env

          cargo install --locked scarb
          scarb --version

      - name: Start Starknet Devnet in a Docker Container
        run: |
          docker run -d -p 127.0.0.1:5050:5050 --name devnet shardlabs/starknet-devnet-rs:latest --seed 0
          sleep 10
          echo "Devnet logs:"
          docker logs devnet

      - name: Deploy Contract and Capture Address
        id: deploy_step 
        run: |
          #export PATH="$HOME/.foundry/bin:$PATH"
          export SNCAST_URL="http://127.0.0.1:5050"
          
          export SNCAST_ACCOUNT="0x64b48806902a367c8598f4f95c305e8c1a1acba5f082d294a43793113115691"
          export SNCAST_PRIVATE_KEY="0x71d7bb07b9a64f6f78ac4c816aff4da9"

          source $HOME/.cargo/env

          echo "Compiling contract..."
          scarb build

          echo "Declaring contract..."
          
          DECLARE_OUTPUT=$(sncast declare --contract-name StarkOverflow)
          CLASS_HASH=$(echo "$DECLARE_OUTPUT" | grep "class_hash" | awk '{print $2}')
          echo "Class Hash: $CLASS_HASH"
          if [ -z "$CLASS_HASH" ]; then
            echo "Falha ao obter o Class Hash!"
            exit 1
          fi

          echo "Deploying contract..."
          DEPLOY_OUTPUT=$(sncast deploy --class-hash $CLASS_HASH --constructor-calldata "0x064b48806902a367c8598f4f95c305e8c1a1acba5f082d294a43793113115691, 0x4718F5A0FC34CC1AF16A1CDEE98FFB20C31F5CD61D6AB07201858F4287C938D")
          
          echo "--- Saída do Deploy ---"
          echo "$DEPLOY_OUTPUT"
          echo "-----------------------"
          
          CONTRACT_ADDRESS=$(echo "$DEPLOY_OUTPUT" | grep "contract_address" | awk '{print $2}')
          echo "Contract Address Captured: $CONTRACT_ADDRESS"
          if [ -z "$CONTRACT_ADDRESS" ]; then
            echo "Falha ao capturar o endereço do contrato!"
            exit 1
          fi

          echo "address=$CONTRACT_ADDRESS" >> $GITHUB_OUTPUT

      - name: Run Cypress Tests
        uses: cypress-io/github-action@v5
        with:
          start: npm run dev
          wait-on: 'http://localhost:3000'
          browser: chrome
        env:
          RPC_URL: "http://127.0.0.1:5050"
          CONTRACT_ADDRESS: ${{ steps.deploy_step.outputs.address }}
          VITE_TOKEN_ADDRESS: "0x4718F5A0FC34CC1AF16A1CDEE98FFB20C31F5CD61D6AB07201858F4287C938D"
          
      - uses: actions/upload-artifact@v4
        # add the line below to store screenshots only on failures
        if: failure()
        with:
          name: cypress-screenshots
          path: frontend/react/cypress/screenshots
          if-no-files-found: ignore # 'warn' or 'error' are also available, defaults to `warn`
      - uses: actions/upload-artifact@v4
        if: always() 
        with:
          name: cypress-videos
          path: frontend/react/cypress/videos
          if-no-files-found: ignore # 'warn' or 'error' are also available, defaults to `warn`  
name: CI Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  test-e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Frontend Dependencies
        working-directory: ./frontend/react
        #run: npm ci
        run: npm install

      # - name: Add local bin to PATH
      #   run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      - name: Install Starknet Foundry (sncast)
        run: |
          curl -L https://raw.githubusercontent.com/foundry-rs/starknet-foundry/master/scripts/install.sh | sh
          #export PATH="$HOME/.foundry/bin:$PATH"
          echo "$HOME/.foundry/bin" >> $GITHUB_PATH
          echo "$HOME/.cairo/bin" >> $GITHUB_PATH
          source "$HOME/.bashrc"
          snfoundryup

      # - name: Install Rust and Scarb
      #   run: |
      #     curl https://sh.rustup.rs -sSf | sh -s -- -y
      #     source $HOME/.cargo/env

      #     cargo install scarb
      #     scarb --version

      - name: Install Scarb
        uses: software-mansion/setup-scarb@v1
        with:
          scarb-version: "2.9.2"
      - run: scarb --version

        # run: |
        #   SCARB_VERSION="2.10.1"
        #   ARCHIVE="scarb-${SCARB_VERSION}-x86_64-unknown-linux-gnu.tar.gz"
        #   DOWNLOAD_URL="https://github.com/embarkstudios/scarb/releases/download/v${SCARB_VERSION}/${ARCHIVE}"

        #   mkdir -p $HOME/.local/bin
        #   curl -L "$DOWNLOAD_URL" -o /tmp/${ARCHIVE}
        #   tar -xzf /tmp/${ARCHIVE} -C /tmp
        #   mv /tmp/scarb-${SCARB_VERSION}-x86_64-unknown-linux-gnu/scarb $HOME/.local/bin/
        #   chmod +x $HOME/.local/bin/scarb
        #   echo "$HOME/.local/bin" >> $GITHUB_PATH

        #   scarb --version

      - name: Start Starknet Devnet in a Docker Container
        run: |
          # Install jq for JSON processing
          sudo apt-get update && sudo apt-get install -y jq
          docker run --network host -d --name devnet shardlabs/starknet-devnet-rs:latest-seed0
          sleep 30
          echo "Devnet logs:"
          #docker logs devnet --tail 50
          docker logs devnet
          echo "Checking Devnet health:"
          curl -v http://127.0.0.1:5050/is_alive
          for i in {1..10}; do
            if curl -s http://127.0.0.1:5050/is_alive | grep -q "Alive"; then
              echo "Devnet is ready!"
              break
            fi
            echo "Waiting for devnet... attempt $i"
            sleep 5
          done

      - name: Setup Starknet Account Configuration
        working-directory: smartcontract
        run: |
          # Create the accounts file in the expected location
          mkdir -p /home/runner/.starknet_accounts
          cat <<'EOF' > /home/runner/work/.starknet_accounts/starknet_open_zeppelin_accounts.json
          {
            "alpha-sepolia": {
              "account-1": {
                "address": "0x64b48806902a367c8598f4f95c305e8c1a1acba5f082d294a43793113115691",
                "class_hash": "0x5b4b537eaa2399e3aa99c4e2e0208ebd6c71bc1467938cd52c798c601e43564",
                "deployed": true,
                "legacy": false,
                "private_key": "0x71d7bb07b9a64f6f78ac4c816aff4da9",
                "public_key": "0x39d9e6ce352ad4530a0ef5d5a18fd3303c3606a7fa6ac5b620020ad681cc33b",
                "type": "open_zeppelin"
              },
              "account-2": {
                "address": "0x64b48806902a367c8598f4f95c305e8c1a1acba5f082d294a43793113115691",
                "class_hash": "0x5b4b537eaa2399e3aa99c4e2e0208ebd6c71bc1467938cd52c798c601e43564",
                "deployed": true,
                "legacy": false,
                "private_key": "0x71d7bb07b9a64f6f78ac4c816aff4da9",
                "public_key": "0x39d9e6ce352ad4530a0ef5d5a18fd3303c3606a7fa6ac5b620020ad681cc33b",
                "type": "open_zeppelin"
              },
              "account-3": {
                "address": "0x78662e7352d062084b0010068b99288486c2d8b914f6e2a55ce945f8792c8b1",
                "class_hash": "0x5b4b537eaa2399e3aa99c4e2e0208ebd6c71bc1467938cd52c798c601e43564",
                "deployed": true,
                "legacy": false,
                "private_key": "0xe1406455b7d66b1690803be066cbe5e",
                "public_key": "0x7a1bb2744a7dd29bffd44341dbd78008adb4bc11733601e7eddff322ada9cb",
                "type": "open_zeppelin"
              }
            }
          }
          EOF
          echo "verify .starknet_accounts contents..."
          ls -la /home/runner/work/.starknet_accounts

          echo "verify starknet_open_zeppelin_accounts contents..."
          cat /home/runner/work/.starknet_accounts/starknet_open_zeppelin_accounts.json

          # Create snfoundry.toml with simplified configuration
          cat <<'EOF' > snfoundry.toml
          [sncast.devnet]
          account = "account-1"
          accounts-file = "/home/runner/work/.starknet_accounts/starknet_open_zeppelin_accounts.json"
          url = "http://127.0.0.1:5050/rpc"
          EOF

          echo "snfoundry.toml contents:"
          cat snfoundry.toml

      - name: Verify Devnet Connection and Get Predeployed Accounts
        working-directory: smartcontract
        run: |
          echo "Testing Devnet connection..."
          curl -v http://127.0.0.1:5050/is_alive
          
          echo "Getting predeployed accounts..."
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"jsonrpc":"2.0","method":"devnet_getPredeployedAccounts","params":[],"id":1}' \
            http://127.0.0.1:5050 | jq '.'

      - name: Deploy Contract and Capture Address
        id: deploy_step 
        working-directory: smartcontract
        run: |
          source $HOME/.cargo/env
          echo "Current dir: $(pwd)"
          ls -la

          # Verify configuration files
          echo "Contents of snfoundry.toml:"
          cat snfoundry.toml || echo "snfoundry.toml not found"
                    
          if [ ! -f Scarb.toml ]; then
            echo "Error: Scarb.toml not found in $(pwd)"
            exit 1
          fi

          echo "Compiling contract..."
          rm -rf ~/.cache/scarb || true
          scarb build

          echo "mostrando devnet config..."
          sncast show-config
          
          for i in {1..3}; do
            echo "Tentativa $i de declare..."
            if DECLARE_OUTPUT=$(sncast --profile devnet declare --contract-name StarkOverflow --max-fee 999999999999999999); then
              echo "Declare bem-sucedido!"
              echo "$DECLARE_OUTPUT"
              CLASS_HASH=$(echo "$DECLARE_OUTPUT" | grep "class_hash" | awk '{print $2}')
              echo "Class Hash: $CLASS_HASH"
              break
            else
              echo "Declare falhou, tentando novamente em 10 segundos..."
              sleep 10
            fi
            
            if [ $i -eq 3 ]; then
              echo "Todas as tentativas de declare falharam"
              exit 1
            fi
          done
          
          if [ -z "$CLASS_HASH" ]; then
            echo "Falha ao obter o Class Hash!"
            exit 1
          fi

          echo "Deploying contract..."
          
          # Deploy com retry também
          for i in {1..3}; do
            echo "Tentativa $i de deploy..."
            if DEPLOY_OUTPUT=$(sncast --profile --verbose devnet --account-address $ACCOUNT_ADDRESS --private-key $ACCOUNT_PRIVATE_KEY deploy --class-hash $CLASS_HASH --arguments "$ACCOUNT_ADDRESS, 0x4718F5A0FC34CC1AF16A1CDEE98FFB20C31F5CD61D6AB07201858F4287C938D" --max-fee 999999999999999999); then
              echo "Deploy bem-sucedido!"
              echo "$DEPLOY_OUTPUT"
              CONTRACT_ADDRESS=$(echo "$DEPLOY_OUTPUT" | grep "contract_address" | awk '{print $2}')
              echo "Contract Address Captured: $CONTRACT_ADDRESS"
              break
            else
              echo "Deploy falhou, tentando novamente em 10 segundos..."
              sleep 10
            fi
            
            if [ $i -eq 3 ]; then
              echo "Todas as tentativas de deploy falharam"
              exit 1
            fi
          done
          
          if [ -z "$CONTRACT_ADDRESS" ]; then
            echo "Falha ao capturar o endereço do contrato!"
            exit 1
          fi

          echo "address=$CONTRACT_ADDRESS" >> $GITHUB_OUTPUT

      - name: Run Cypress Tests
        uses: cypress-io/github-action@v5
        with:
          start: npm run dev
          wait-on: 'http://localhost:3000'
          browser: chrome
        env:
          RPC_URL: "http://127.0.0.1:5050"
          CONTRACT_ADDRESS: ${{ steps.deploy_step.outputs.address }}
          VITE_TOKEN_ADDRESS: "0x4718F5A0FC34CC1AF16A1CDEE98FFB20C31F5CD61D6AB07201858F4287C938D"
          
      - uses: actions/upload-artifact@v4
        # add the line below to store screenshots only on failures
        if: failure()
        with:
          name: cypress-screenshots
          path: frontend/react/cypress/screenshots
          if-no-files-found: ignore # 'warn' or 'error' are also available, defaults to `warn`
      - uses: actions/upload-artifact@v4
        if: always() 
        with:
          name: cypress-videos
          path: frontend/react/cypress/videos
          if-no-files-found: ignore # 'warn' or 'error' are also available, defaults to `warn`  